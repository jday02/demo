{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ADPT","text":"<p>This is a demo of handling class documentation for a python tool.</p>"},{"location":"api/","title":"References","text":"<p>Return to demo.</p>"},{"location":"api/#dpt-class","title":"Dpt Class","text":"<p>Data processing tool migration from SAS.</p>"},{"location":"api/#adpt.dpt.Dpt--state-machine","title":"State Machine","text":"int <p>The index of the state machine, set to 0 initially</p> list <p>The list of states the machine may take during data processing</p> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>class Dpt:\n\"\"\"Data processing tool migration from SAS.\n\n    State Machine\n    -------------\n    current_state_num: int\n        The index of the state machine, set to 0 initially\n\n    machine_states: list\n        The list of states the machine may take during data processing\n    \"\"\"\n\n    current_state_num = 0\n    json_data = \"\"\n    json_file = \"\"\n\n    machine_states = (\n        \"init\",\n        \"create_project_subfolders\",\n        \"new_program_calls\",\n        \"read_lab_pro_qc\",\n        \"process_data_inputs\",\n    )\n\n    tlog: list[str] = []\n\n    def __init__(self, json_file: str) -&gt; None:\n\"\"\"Initialize the class.\n\n        Create class vars using JSON from file location provided.\n\n        Parameters\n        ----------\n        home_dir: string\n            The path where the process was started.\n        jfile: string\n            The validated path and file name for the input JSON file.\n        input_json: string\n            The class var containing the JSON file path found.\n\n        Raises\n        ------\n        FileNotFoundError\n            Error: [err]\n\n        \"\"\"\n        # print(\"initializing....\")\n        self.home_dir = os.getcwd()\n        self.json_file = json_file\n\n        jfile = self.check_json(json_file)\n\n        if jfile is None:\n            print(f\"Error: JSON file {json_file} not found\")\n            return None\n\n        self.input_json = jfile\n        self.json_data = self.read_json(self.input_json)\n        print(f\"got json_data: \\n{self.json_data}\")\n        if self.json_data == \"\":\n            return None\n\n        self.load_json(self.json_data)\n\n    def read_json(self, json_file: str) -&gt; str:\n\"\"\"Read the __init__ JSON file.\n        Parameters\n        ----------\n        json_file: str\n            The JSON file to be read containing class vars to be created.\n\n        jfp: file pointer\n            File pointer to the JSON file containing class vars to be created.\n\n        Raises\n        ------\n        Exception\n            Error: Unexpected ([err])\n\n        Creates\n        -------\n        A set of class vars defined in the JSON\n\n        \"\"\"\n\n        try:\n            print(f\"open {json_file}\")\n            jfp = open(json_file, encoding=\"utf-8\", mode=\"r\")\n            return jfp.read()\n        except Exception as err:\n            print(f\"Error: Unexpected ({err})\")\n            return \"\"\n\n    def load_json(self, jdata: str) -&gt; None:\n\"\"\"Load the data from text read from the JSON file.\n        Parameters\n        ----------\n        jdata: str\n            The raw JSON text read from the file containing class vars to be created.\n\n        Raises\n        ------\n        ValueError\n            Error: Malformed JSON in {jdata} ([err])\n        SyntaxError\n            Error: Data type problem in {jdata} ([err])\n        UnicodeDecodeError\n            Error: Failed to recognize unicode in {jdata} ([err])\n        NameError\n            Error: Failed to assign class var [index] ([err])\n\n        Creates\n        -------\n        A set of class vars defined in the JSON\n\n        \"\"\"\n\n        try:\n            dat = json.loads(jdata)\n        except ValueError as err:\n            print(f\"Error: Malformed JSON in {jdata} ({err})\")\n            self.end(\"E2\")\n        except SyntaxError as err:\n            print(f\"Error: Data type problem in {jdata} ({err})\")\n            self.end(\"E2\")\n        except UnicodeDecodeError as err:\n            print(f\"Warning: Failed to recognize unicode in {jdata} ({err})\")\n            self.end(\"W4\")\n        except Exception as err:\n            print(f\"Error: unspecified ({err})\")\n            self.end(\"E2\")\n\n        for k in dat.keys():\n            # self.tlog.append(f\"self.{k} = dat[\\\"{k}\\\"]\")\n            try:\n                exec(f'self.{k} = dat[\"{k}\"]')\n            except NameError as err:\n                print(f\"Error: Failed to assign class var {k} ({err})\")\n                self.end(\"E3\")\n\n    def end(self, errcode: str = \"0\") -&gt; None:\n\"\"\"End the process.\n\n        Try to end gracefully, and provide an error code.\n\n        Parameters\n        ----------\n        errcode: str\n            Exit and provide the error code. Default 0, no error.\n\n        Exit\n        ----\n        int\n            Exit passing the error code.\n        \"\"\"\n        self.addlog(errcode)\n        self.getlog()\n        sys.exit(errcode)\n\n    def check_json(self, json_file: str) -&gt; str:\n\"\"\"Find the JSON file.\n\n        Check whether the json_file can be found. If not found, try adding\n        home_dir to the front of the path and recheck.\n\n        Parameters\n        ----------\n        json_file: str\n            The location of the JSON file passed to the class. Format: &lt;path&gt;/file_name\n\n        Raises\n        ------\n        FileNotFoundError\n            JSON file {json_file} not found\n\n        Returns\n        -------\n        string\n            The full path and file name where the JSON file was found.\n        \"\"\"\n        if os.path.exists(json_file):\n            return json_file\n\n        jfile = f\"{self.home_dir}/{json_file}\"\n        # self.tlog.append(jfile)\n        if os.path.exists(jfile):\n            return jfile\n        else:\n            return \"\"\n\n    def addlog(self, msg: str = \"unk\") -&gt; None:\n\"\"\"Add a message to the log.\n\n        Capture a diagnostic message.\n\n        Parameters\n        ----------\n        msg: str\n            A string for the message to be appended to tlog\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        self.tlog.append(msg)\n\n    def getlog(self) -&gt; None:\n\"\"\"Diagnostic log for dev.\n\n        Development tool to collect diagnosting messages for reading\n        optionally at the end.\n\n        Parameters\n        ----------\n        tlog: list\n            Public class var containing strings, diagnostic tool for dev.\n        line: string\n            An item from tlog.\n\n        Returns\n        -------\n        None\n        \"\"\"\n        for line in self.tlog:\n            print(f\"{line}\")\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.__init__","title":"<code>__init__(json_file)</code>","text":"<p>Initialize the class.</p> <p>Create class vars using JSON from file location provided.</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.__init__--parameters","title":"Parameters","text":"string <p>The path where the process was started.</p> string <p>The validated path and file name for the input JSON file.</p> string <p>The class var containing the JSON file path found.</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.__init__--raises","title":"Raises","text":"<p>FileNotFoundError     Error: [err]</p> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def __init__(self, json_file: str) -&gt; None:\n\"\"\"Initialize the class.\n\n    Create class vars using JSON from file location provided.\n\n    Parameters\n    ----------\n    home_dir: string\n        The path where the process was started.\n    jfile: string\n        The validated path and file name for the input JSON file.\n    input_json: string\n        The class var containing the JSON file path found.\n\n    Raises\n    ------\n    FileNotFoundError\n        Error: [err]\n\n    \"\"\"\n    # print(\"initializing....\")\n    self.home_dir = os.getcwd()\n    self.json_file = json_file\n\n    jfile = self.check_json(json_file)\n\n    if jfile is None:\n        print(f\"Error: JSON file {json_file} not found\")\n        return None\n\n    self.input_json = jfile\n    self.json_data = self.read_json(self.input_json)\n    print(f\"got json_data: \\n{self.json_data}\")\n    if self.json_data == \"\":\n        return None\n\n    self.load_json(self.json_data)\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.addlog","title":"<code>addlog(msg='unk')</code>","text":"<p>Add a message to the log.</p> <p>Capture a diagnostic message.</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.addlog--parameters","title":"Parameters","text":"str <p>A string for the message to be appended to tlog</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.addlog--returns","title":"Returns","text":"<p>None</p> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def addlog(self, msg: str = \"unk\") -&gt; None:\n\"\"\"Add a message to the log.\n\n    Capture a diagnostic message.\n\n    Parameters\n    ----------\n    msg: str\n        A string for the message to be appended to tlog\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    self.tlog.append(msg)\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.check_json","title":"<code>check_json(json_file)</code>","text":"<p>Find the JSON file.</p> <p>Check whether the json_file can be found. If not found, try adding home_dir to the front of the path and recheck.</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.check_json--parameters","title":"Parameters","text":"str <p>The location of the JSON file passed to the class. Format: /file_name"},{"location":"api/#adpt.dpt._dpt.Dpt.check_json--raises","title":"Raises","text":"<p>FileNotFoundError     JSON file {json_file} not found</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.check_json--returns","title":"Returns","text":"<p>string     The full path and file name where the JSON file was found.</p> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def check_json(self, json_file: str) -&gt; str:\n\"\"\"Find the JSON file.\n\n    Check whether the json_file can be found. If not found, try adding\n    home_dir to the front of the path and recheck.\n\n    Parameters\n    ----------\n    json_file: str\n        The location of the JSON file passed to the class. Format: &lt;path&gt;/file_name\n\n    Raises\n    ------\n    FileNotFoundError\n        JSON file {json_file} not found\n\n    Returns\n    -------\n    string\n        The full path and file name where the JSON file was found.\n    \"\"\"\n    if os.path.exists(json_file):\n        return json_file\n\n    jfile = f\"{self.home_dir}/{json_file}\"\n    # self.tlog.append(jfile)\n    if os.path.exists(jfile):\n        return jfile\n    else:\n        return \"\"\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.end","title":"<code>end(errcode='0')</code>","text":"<p>End the process.</p> <p>Try to end gracefully, and provide an error code.</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.end--parameters","title":"Parameters","text":"str <p>Exit and provide the error code. Default 0, no error.</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.end--exit","title":"Exit","text":"<p>int     Exit passing the error code.</p> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def end(self, errcode: str = \"0\") -&gt; None:\n\"\"\"End the process.\n\n    Try to end gracefully, and provide an error code.\n\n    Parameters\n    ----------\n    errcode: str\n        Exit and provide the error code. Default 0, no error.\n\n    Exit\n    ----\n    int\n        Exit passing the error code.\n    \"\"\"\n    self.addlog(errcode)\n    self.getlog()\n    sys.exit(errcode)\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.getlog","title":"<code>getlog()</code>","text":"<p>Diagnostic log for dev.</p> <p>Development tool to collect diagnosting messages for reading optionally at the end.</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.getlog--parameters","title":"Parameters","text":"list <p>Public class var containing strings, diagnostic tool for dev.</p> string <p>An item from tlog.</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.getlog--returns","title":"Returns","text":"<p>None</p> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def getlog(self) -&gt; None:\n\"\"\"Diagnostic log for dev.\n\n    Development tool to collect diagnosting messages for reading\n    optionally at the end.\n\n    Parameters\n    ----------\n    tlog: list\n        Public class var containing strings, diagnostic tool for dev.\n    line: string\n        An item from tlog.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    for line in self.tlog:\n        print(f\"{line}\")\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.load_json","title":"<code>load_json(jdata)</code>","text":"<p>Load the data from text read from the JSON file. Parameters</p> str <p>The raw JSON text read from the file containing class vars to be created.</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.load_json--raises","title":"Raises","text":"<p>ValueError     Error: Malformed JSON in {jdata} ([err]) SyntaxError     Error: Data type problem in {jdata} ([err]) UnicodeDecodeError     Error: Failed to recognize unicode in {jdata} ([err]) NameError     Error: Failed to assign class var [index] ([err])</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.load_json--creates","title":"Creates","text":"<p>A set of class vars defined in the JSON</p> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def load_json(self, jdata: str) -&gt; None:\n\"\"\"Load the data from text read from the JSON file.\n    Parameters\n    ----------\n    jdata: str\n        The raw JSON text read from the file containing class vars to be created.\n\n    Raises\n    ------\n    ValueError\n        Error: Malformed JSON in {jdata} ([err])\n    SyntaxError\n        Error: Data type problem in {jdata} ([err])\n    UnicodeDecodeError\n        Error: Failed to recognize unicode in {jdata} ([err])\n    NameError\n        Error: Failed to assign class var [index] ([err])\n\n    Creates\n    -------\n    A set of class vars defined in the JSON\n\n    \"\"\"\n\n    try:\n        dat = json.loads(jdata)\n    except ValueError as err:\n        print(f\"Error: Malformed JSON in {jdata} ({err})\")\n        self.end(\"E2\")\n    except SyntaxError as err:\n        print(f\"Error: Data type problem in {jdata} ({err})\")\n        self.end(\"E2\")\n    except UnicodeDecodeError as err:\n        print(f\"Warning: Failed to recognize unicode in {jdata} ({err})\")\n        self.end(\"W4\")\n    except Exception as err:\n        print(f\"Error: unspecified ({err})\")\n        self.end(\"E2\")\n\n    for k in dat.keys():\n        # self.tlog.append(f\"self.{k} = dat[\\\"{k}\\\"]\")\n        try:\n            exec(f'self.{k} = dat[\"{k}\"]')\n        except NameError as err:\n            print(f\"Error: Failed to assign class var {k} ({err})\")\n            self.end(\"E3\")\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.read_json","title":"<code>read_json(json_file)</code>","text":"<p>Read the init JSON file. Parameters</p> str <p>The JSON file to be read containing class vars to be created.</p> file pointer <p>File pointer to the JSON file containing class vars to be created.</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.read_json--raises","title":"Raises","text":"<p>Exception     Error: Unexpected ([err])</p>"},{"location":"api/#adpt.dpt._dpt.Dpt.read_json--creates","title":"Creates","text":"<p>A set of class vars defined in the JSON</p> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def read_json(self, json_file: str) -&gt; str:\n\"\"\"Read the __init__ JSON file.\n    Parameters\n    ----------\n    json_file: str\n        The JSON file to be read containing class vars to be created.\n\n    jfp: file pointer\n        File pointer to the JSON file containing class vars to be created.\n\n    Raises\n    ------\n    Exception\n        Error: Unexpected ([err])\n\n    Creates\n    -------\n    A set of class vars defined in the JSON\n\n    \"\"\"\n\n    try:\n        print(f\"open {json_file}\")\n        jfp = open(json_file, encoding=\"utf-8\", mode=\"r\")\n        return jfp.read()\n    except Exception as err:\n        print(f\"Error: Unexpected ({err})\")\n        return \"\"\n</code></pre>"},{"location":"home/","title":"Return to demo repository","text":"<p>Return to demo.</p>"}]}