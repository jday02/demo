{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ADPT","text":"<p>This is a demo of handling class documentation for a python tool.</p>"},{"location":"api/","title":"References","text":""},{"location":"api/#dpt-class","title":"Dpt Class","text":"<p>Data processing tool migration from SAS.</p> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>class Dpt:\n\"\"\"Data processing tool migration from SAS.\"\"\"\n\n    current_state_num = 0\n    json_data = \"\"\n    json_file = \"\"\n\n    machine_states = (\n        \"init\",\n        \"create_project_subfolders\",\n        \"new_program_calls\",\n        \"read_lab_pro_qc\",\n        \"process_data_inputs\",\n    )\n\n    tlog: list[str] = []\n\n    def __init__(self, json_file: str) -&gt; None:\n\"\"\"Initialize the class.\n\n        Create class vars using JSON from file location provided.\n\n        Parameters\n        ----------\n        json_file : str\n            The path where the process was started.\n\n        Raises\n        ------\n        FileNotFoundError\n            Error: [err]\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        # print(\"initializing....\")\n        self.home_dir = os.getcwd()\n        self.json_file = json_file\n\n        jfile = self.check_json(json_file)\n\n        if jfile == \"\":\n            print(f\"Error: JSON file {self.json_file} not found\")\n            return None\n\n        self.input_json = jfile\n        self.json_data = self.read_json(self.input_json)\n        print(f\"got json_data: \\n{self.json_data}\")\n        if self.json_data == \"\":\n            return None\n\n        self.load_json(self.json_data)\n\n    def read_json(self, json_file: str) -&gt; str:\n\"\"\"Read the __init__ JSON file.\n\n        Extract the contents of the JSON file.\n\n        Parameters\n        ----------\n        json_file : str\n            The JSON file to be read containing class vars to be created.\n\n        Raises\n        ------\n        Exception\n            Error: Unexpected ([err])\n\n        Returns\n        -------\n        str\n            The contents of the JSON file\n\n        \"\"\"\n\n        try:\n            print(f\"open {json_file}\")\n            with open(json_file, encoding=\"utf-8\") as jfp:\n                return jfp.read()\n        except Exception as err:\n            print(f\"Error: Unexpected ({err})\")\n            return \"\"\n\n    def load_json(self, jdata: str) -&gt; None:\n\"\"\"Load the data from the JSON file.\n\n        Parse the JSON text to create class variables.\n\n        Parameters\n        ----------\n        jdata: str\n            The raw JSON text.\n\n        Raises\n        ------\n        ValueError\n            Error: Malformed JSON in {jdata} ([err])\n        SyntaxError\n            Error: Data type problem in {jdata} ([err])\n        UnicodeDecodeError\n            Error: Failed to recognize unicode in {jdata} ([err])\n        NameError\n            Error: Failed to assign class var [index] ([err])\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n\n        try:\n            dat = json.loads(jdata)\n        except ValueError as err:\n            print(f\"Error: Malformed JSON in {jdata} ({err})\")\n            self.end(\"E2\")\n        except SyntaxError as err:\n            print(f\"Error: Data type problem in {jdata} ({err})\")\n            self.end(\"E2\")\n        except UnicodeDecodeError as err:\n            print(f\"Warning: Failed to recognize unicode in {jdata} ({err})\")\n            self.end(\"W4\")\n        except Exception as err:\n            print(f\"Error: unspecified ({err})\")\n            self.end(\"E2\")\n\n        for k in dat:\n            # self.tlog.append(f\"self.{k} = dat[\\\"{k}\\\"]\")\n            try:\n                exec(f'self.{k} = dat[\"{k}\"]')\n            except NameError as err:\n                print(f\"Error: Failed to assign class var {k} ({err})\")\n                self.end(\"E3\")\n\n    def end(self, errcode: str = \"0\") -&gt; None:\n\"\"\"End the process.\n\n        Try to end gracefully, and provide an error code.\n\n        Parameters\n        ----------\n        errcode : str\n            Exit and provide the error code. Default 0, no error.\n\n        Exit\n        ----\n        int\n            Exit passing the error code.\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        self.addlog(errcode)\n        self.getlog()\n        sys.exit(errcode)\n\n    def check_json(self, json_file: str) -&gt; str:\n\"\"\"Find the JSON file.\n\n        Check whether the json_file can be found. If not found, try adding\n        home_dir to the front of the path and recheck.\n\n        Parameters\n        ----------\n        json_file : str\n            The location of the JSON file passed to the class. Format: &lt;path&gt;/file_name\n\n        Raises\n        ------\n        FileNotFoundError\n            JSON file {json_file} not found\n\n        Returns\n        -------\n        str\n            The full path and file name where the JSON file was found.\n\n        \"\"\"\n        if os.path.exists(json_file):\n            return json_file\n\n        jfile = f\"{self.home_dir}/{json_file}\"\n        # self.tlog.append(jfile)\n        if os.path.exists(jfile):\n            return jfile\n        else:\n            return \"\"\n\n    def addlog(self, msg: str = \"unk\") -&gt; None:\n\"\"\"Add a message to the log.\n\n        Capture a diagnostic message.\n\n        Parameters\n        ----------\n        msg : str\n            A string for the message to be appended to tlog\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        self.tlog.append(msg)\n\n    def getlog(self) -&gt; None:\n\"\"\"Diagnostic log for dev.\n\n        Development tool to display diagnostic messages.\n\n        Returns\n        -------\n        None\n\n        \"\"\"\n        for line in self.tlog:\n            print(f\"{line}\")\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.__init__","title":"<code>__init__(json_file)</code>","text":"<p>Initialize the class.</p> <p>Create class vars using JSON from file location provided.</p> <p>Parameters:</p> Name Type Description Default <code>json_file</code> <code>str</code> <p>The path where the process was started.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>Error: [err]</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def __init__(self, json_file: str) -&gt; None:\n\"\"\"Initialize the class.\n\n    Create class vars using JSON from file location provided.\n\n    Parameters\n    ----------\n    json_file : str\n        The path where the process was started.\n\n    Raises\n    ------\n    FileNotFoundError\n        Error: [err]\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    # print(\"initializing....\")\n    self.home_dir = os.getcwd()\n    self.json_file = json_file\n\n    jfile = self.check_json(json_file)\n\n    if jfile == \"\":\n        print(f\"Error: JSON file {self.json_file} not found\")\n        return None\n\n    self.input_json = jfile\n    self.json_data = self.read_json(self.input_json)\n    print(f\"got json_data: \\n{self.json_data}\")\n    if self.json_data == \"\":\n        return None\n\n    self.load_json(self.json_data)\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.addlog","title":"<code>addlog(msg='unk')</code>","text":"<p>Add a message to the log.</p> <p>Capture a diagnostic message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>A string for the message to be appended to tlog</p> <code>'unk'</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def addlog(self, msg: str = \"unk\") -&gt; None:\n\"\"\"Add a message to the log.\n\n    Capture a diagnostic message.\n\n    Parameters\n    ----------\n    msg : str\n        A string for the message to be appended to tlog\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    self.tlog.append(msg)\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.check_json","title":"<code>check_json(json_file)</code>","text":"<p>Find the JSON file.</p> <p>Check whether the json_file can be found. If not found, try adding home_dir to the front of the path and recheck.</p> <p>Parameters:</p> Name Type Description Default <code>json_file</code> <code>str</code> <p>The location of the JSON file passed to the class. Format: /file_name required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>JSON file {json_file} not found</p> <p>Returns:</p> Type Description <code>str</code> <p>The full path and file name where the JSON file was found.</p> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def check_json(self, json_file: str) -&gt; str:\n\"\"\"Find the JSON file.\n\n    Check whether the json_file can be found. If not found, try adding\n    home_dir to the front of the path and recheck.\n\n    Parameters\n    ----------\n    json_file : str\n        The location of the JSON file passed to the class. Format: &lt;path&gt;/file_name\n\n    Raises\n    ------\n    FileNotFoundError\n        JSON file {json_file} not found\n\n    Returns\n    -------\n    str\n        The full path and file name where the JSON file was found.\n\n    \"\"\"\n    if os.path.exists(json_file):\n        return json_file\n\n    jfile = f\"{self.home_dir}/{json_file}\"\n    # self.tlog.append(jfile)\n    if os.path.exists(jfile):\n        return jfile\n    else:\n        return \"\"\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.end","title":"<code>end(errcode='0')</code>","text":"<p>End the process.</p> <p>Try to end gracefully, and provide an error code.</p> <p>Parameters:</p> Name Type Description Default <code>errcode</code> <code>str</code> <p>Exit and provide the error code. Default 0, no error.</p> <code>'0'</code>"},{"location":"api/#adpt.dpt._dpt.Dpt.end--exit","title":"Exit","text":"<p>int     Exit passing the error code.</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def end(self, errcode: str = \"0\") -&gt; None:\n\"\"\"End the process.\n\n    Try to end gracefully, and provide an error code.\n\n    Parameters\n    ----------\n    errcode : str\n        Exit and provide the error code. Default 0, no error.\n\n    Exit\n    ----\n    int\n        Exit passing the error code.\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    self.addlog(errcode)\n    self.getlog()\n    sys.exit(errcode)\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.getlog","title":"<code>getlog()</code>","text":"<p>Diagnostic log for dev.</p> <p>Development tool to display diagnostic messages.</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def getlog(self) -&gt; None:\n\"\"\"Diagnostic log for dev.\n\n    Development tool to display diagnostic messages.\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n    for line in self.tlog:\n        print(f\"{line}\")\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.load_json","title":"<code>load_json(jdata)</code>","text":"<p>Load the data from the JSON file.</p> <p>Parse the JSON text to create class variables.</p> <p>Parameters:</p> Name Type Description Default <code>jdata</code> <code>str</code> <p>The raw JSON text.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Error: Malformed JSON in {jdata} ([err])</p> <code>SyntaxError</code> <p>Error: Data type problem in {jdata} ([err])</p> <code>UnicodeDecodeError</code> <p>Error: Failed to recognize unicode in {jdata} ([err])</p> <code>NameError</code> <p>Error: Failed to assign class var [index] ([err])</p> <p>Returns:</p> Type Description <code>None</code> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def load_json(self, jdata: str) -&gt; None:\n\"\"\"Load the data from the JSON file.\n\n    Parse the JSON text to create class variables.\n\n    Parameters\n    ----------\n    jdata: str\n        The raw JSON text.\n\n    Raises\n    ------\n    ValueError\n        Error: Malformed JSON in {jdata} ([err])\n    SyntaxError\n        Error: Data type problem in {jdata} ([err])\n    UnicodeDecodeError\n        Error: Failed to recognize unicode in {jdata} ([err])\n    NameError\n        Error: Failed to assign class var [index] ([err])\n\n    Returns\n    -------\n    None\n\n    \"\"\"\n\n    try:\n        dat = json.loads(jdata)\n    except ValueError as err:\n        print(f\"Error: Malformed JSON in {jdata} ({err})\")\n        self.end(\"E2\")\n    except SyntaxError as err:\n        print(f\"Error: Data type problem in {jdata} ({err})\")\n        self.end(\"E2\")\n    except UnicodeDecodeError as err:\n        print(f\"Warning: Failed to recognize unicode in {jdata} ({err})\")\n        self.end(\"W4\")\n    except Exception as err:\n        print(f\"Error: unspecified ({err})\")\n        self.end(\"E2\")\n\n    for k in dat:\n        # self.tlog.append(f\"self.{k} = dat[\\\"{k}\\\"]\")\n        try:\n            exec(f'self.{k} = dat[\"{k}\"]')\n        except NameError as err:\n            print(f\"Error: Failed to assign class var {k} ({err})\")\n            self.end(\"E3\")\n</code></pre>"},{"location":"api/#adpt.dpt._dpt.Dpt.read_json","title":"<code>read_json(json_file)</code>","text":"<p>Read the init JSON file.</p> <p>Extract the contents of the JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>json_file</code> <code>str</code> <p>The JSON file to be read containing class vars to be created.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>Error: Unexpected ([err])</p> <p>Returns:</p> Type Description <code>str</code> <p>The contents of the JSON file</p> Source code in <code>adpt\\dpt\\_dpt.py</code> <pre><code>def read_json(self, json_file: str) -&gt; str:\n\"\"\"Read the __init__ JSON file.\n\n    Extract the contents of the JSON file.\n\n    Parameters\n    ----------\n    json_file : str\n        The JSON file to be read containing class vars to be created.\n\n    Raises\n    ------\n    Exception\n        Error: Unexpected ([err])\n\n    Returns\n    -------\n    str\n        The contents of the JSON file\n\n    \"\"\"\n\n    try:\n        print(f\"open {json_file}\")\n        with open(json_file, encoding=\"utf-8\") as jfp:\n            return jfp.read()\n    except Exception as err:\n        print(f\"Error: Unexpected ({err})\")\n        return \"\"\n</code></pre>"},{"location":"home/","title":"Return to Repo","text":"<p>Go back to the demo repository.</p>"}]}